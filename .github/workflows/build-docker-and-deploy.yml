# .github/workflows/build-docker-and-deploy.yml
name: Course Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    steps:
    - name: Set up & Checkout
      uses: actions/checkout@v3

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      with:
        sonar-token: ${{ secrets.SONAR_TOKEN }}
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.projectName=${{ secrets.SONAR_PROJECT_NAME }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.qualitygate.wait=true

    - name: Get package version
      run: echo "::set-output name=version::$(cat package.json | jq -r '.version')"
      id: get_version

    - name: Compress code
      run: chmod +x ./compress.sh && ./compress.sh
      shell: bash
      working-directory: ${{ github.workspace }}

#     - name: UnitTest ${{matrix.node-version}}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{matrix.node-version}}
#         cache: 'yarn'
#     - run: yarn install --frozen-lockfile
#     - run: yarn test
#       env:
#         CI: true

    - name: Login Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
      id: buildx

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      id: docker_build
      with:
        context: ./docker
        file: ./docker/Dockerfile
        push: true
        tags: ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_IMAGE}}:${{ steps.get_version.outputs.version }}

    - name: SSH Deploy
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: ${{secrets.SSH_HOST}}
        username: ${{secrets.SSH_USERNAME}}
        password: ${{secrets.SSH_PASSWORD}}
        port: ${{secrets.SSH_PORT}}
        script: |
          export TAG=${{ steps.get_version.outputs.version }} && cd ~/services/travel-backend && sudo chmod +x ./deploy.sh && ./deploy.sh
